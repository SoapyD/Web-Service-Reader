set language british;
/*CREATE A TEMP TABLE THEN INSERT IT INTO THE PERMENTANT TABLE*/
/*CREATE TABLE heat_change (*/
DECLARE @Temp_Table TABLE(
	recid nvarchar(200) primary key,
	number nvarchar(100),
	businessunit nvarchar(100),
	company nvarchar(150),
	ownerteam nvarchar(100),
	owner nvarchar(100),
	customer nvarchar(100),
	typeofchange nvarchar(50),
	risklevel nvarchar(20),
	priority int,
	status nvarchar(30),
	cancellationreason nvarchar(200),
	service nvarchar(50),
	category nvarchar(50),
	subcategory nvarchar(50),
	subject nvarchar(500),
	description nvarchar(500),
	justification nvarchar(500),
	reason nvarchar(500),
	aa_backoutplan nvarchar(500),
	aa_testplan nvarchar(500),
	aa_whotesting nvarchar(500),
	primarysystemname nvarchar(50),
	primarysystemowner nvarchar(50),
	secondarysystemowner nvarchar(50),
	soxchange nvarchar(50),
	soxsystemowneremail nvarchar(50),
	sponsor nvarchar(50),
	implementationresult nvarchar(50),
	toschedule nvarchar(20),
	scheduledstartdate datetime,
	scheduledenddate datetime,
	startdatetime datetime,
	enddatetime  datetime,
	cmapprovedby nvarchar(50),
	cmapproveddatetime datetime,
	createdby nvarchar(50),
	createddatetime datetime,
	lastmodby nvarchar(50),
	lastmoddatetime datetime,
	closedby nvarchar(50),
	closeddatetime datetime
);
INSERT INTO @Temp_Table
SELECT 
	recid,
	ChangeNumber AS number,
	businessunit,
	OrgUnitName AS company,
	ownerteam,
	owner,
	RequestedBy AS customer,
	typeofchange,
	risklevel,
	CONVERT(INT,priority) AS priority,
	status,
	cancellationreason,
	service,
	category,
	subcategory,
	subject,
	description,
	justification,
	reason,
	aa_backoutplan,
	aa_testplan,
	aa_whotesting,
	primarysystemname,
	primarysystemowner,
	secondarysystemowner,
	soxchange,
	soxsystemowneremail,
	sponsor,
	implementationresult,
	toschedule,
	CASE WHEN scheduledstartdate IS NULL THEN NULL ELSE CONVERT(DATETIME,scheduledstartdate) END AS scheduledstartdate,
	CASE WHEN scheduledenddate IS NULL THEN NULL ELSE CONVERT(DATETIME,scheduledenddate) END AS scheduledenddate,
	CASE WHEN startdatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,startdatetime) END AS startdatetime,
	CASE WHEN enddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,enddatetime) END AS enddatetime,
	cmapprovedby,
	CASE WHEN cmapproveddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,cmapproveddatetime) END AS cmapproveddatetime,
	createdby,
	CASE WHEN createddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,createddatetime) END AS createddatetime,
	lastmodby,
	CASE WHEN lastmoddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,lastmoddatetime) END AS lastmoddatetime,
	closedby,
	CASE WHEN closeddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,closeddatetime) END AS closeddatetime
FROM 
[dbo].[stg] stg;

/*MERGE THE TEMP TABLE WITH THE CLOSED INCIDENTS TABLE*/
MERGE [dbo].[heat_change] target
Using @Temp_Table source
ON (
TARGET.[recid] = SOURCE.[recid]
)
WHEN MATCHED
THEN UPDATE
SET
TARGET.recid = SOURCE.recid,
TARGET.number = SOURCE.number,
TARGET.businessunit = SOURCE.businessunit,
TARGET.company = SOURCE.company,
TARGET.ownerteam = SOURCE.ownerteam,
TARGET.owner = SOURCE.owner,
TARGET.customer = SOURCE.customer,
TARGET.typeofchange = SOURCE.typeofchange,
TARGET.risklevel = SOURCE.risklevel,
TARGET.priority = SOURCE.priority,
TARGET.status = SOURCE.status,
TARGET.cancellationreason = SOURCE.cancellationreason,
TARGET.service = SOURCE.service,
TARGET.category = SOURCE.category,
TARGET.subcategory = SOURCE.subcategory,
TARGET.subject = SOURCE.subject,
TARGET.description = SOURCE.description,
TARGET.justification = SOURCE.justification,
TARGET.reason = SOURCE.reason,
TARGET.aa_backoutplan = SOURCE.aa_backoutplan,
TARGET.aa_testplan = SOURCE.aa_testplan,
TARGET.aa_whotesting = SOURCE.aa_whotesting,
TARGET.primarysystemname = SOURCE.primarysystemname,
TARGET.primarysystemowner = SOURCE.primarysystemowner,
TARGET.secondarysystemowner = SOURCE.secondarysystemowner,
TARGET.soxchange = SOURCE.soxchange,
TARGET.soxsystemowneremail = SOURCE.soxsystemowneremail,
TARGET.sponsor = SOURCE.sponsor,
TARGET.implementationresult = SOURCE.implementationresult,
TARGET.toschedule = SOURCE.toschedule,
TARGET.scheduledenddate = SOURCE.scheduledenddate,
TARGET.scheduledstartdate = SOURCE.scheduledstartdate,
TARGET.startdatetime = SOURCE.startdatetime,
TARGET.enddatetime = SOURCE.enddatetime,
TARGET.cmapprovedby = SOURCE.cmapprovedby,
TARGET.cmapproveddatetime = SOURCE.cmapproveddatetime,
TARGET.createdby = SOURCE.createdby,
TARGET.createddatetime = SOURCE.createddatetime,
TARGET.lastmodby = SOURCE.lastmodby,
TARGET.lastmoddatetime = SOURCE.lastmoddatetime,
TARGET.closedby = SOURCE.closedby,
TARGET.closeddatetime = SOURCE.closeddatetime
WHEN NOT MATCHED BY TARGET
THEN INSERT 
(
recid,
number,
businessunit,
company,
ownerteam,
owner,
customer,
typeofchange,
risklevel,
priority,
status,
cancellationreason,
service,
category,
subcategory,
subject,
description,
justification,
reason,
aa_backoutplan,
aa_testplan,
aa_whotesting,
primarysystemname,
primarysystemowner,
secondarysystemowner,
soxchange,
soxsystemowneremail,
sponsor,
implementationresult,
toschedule,
scheduledenddate,
scheduledstartdate,
startdatetime,
enddatetime,
cmapprovedby,
cmapproveddatetime,
createdby,
createddatetime,
lastmodby,
lastmoddatetime,
closedby,
closeddatetime
)
VALUES (
SOURCE.recid,
SOURCE.number,
SOURCE.businessunit,
SOURCE.company,
SOURCE.ownerteam,
SOURCE.owner,
SOURCE.customer,
SOURCE.typeofchange,
SOURCE.risklevel,
SOURCE.priority,
SOURCE.status,
SOURCE.cancellationreason,
SOURCE.service,
SOURCE.category,
SOURCE.subcategory,
SOURCE.subject,
SOURCE.description,
SOURCE.justification,
SOURCE.reason,
SOURCE.aa_backoutplan,
SOURCE.aa_testplan,
SOURCE.aa_whotesting,
SOURCE.primarysystemname,
SOURCE.primarysystemowner,
SOURCE.secondarysystemowner,
SOURCE.soxchange,
SOURCE.soxsystemowneremail,
SOURCE.sponsor,
SOURCE.implementationresult,
SOURCE.toschedule,
SOURCE.scheduledenddate,
SOURCE.scheduledstartdate,
SOURCE.startdatetime,
SOURCE.enddatetime,
SOURCE.cmapprovedby,
SOURCE.cmapproveddatetime,
SOURCE.createdby,
SOURCE.createddatetime,
SOURCE.lastmodby,
SOURCE.lastmoddatetime,
SOURCE.closedby,
SOURCE.closeddatetime
);
