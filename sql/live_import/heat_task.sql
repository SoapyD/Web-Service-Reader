set language british;
/*CREATE A TEMP TABLE THEN INSERT IT INTO THE PERMENTANT TABLE*/
/*CREATE TABLE heat_task (*/
DECLARE @Temp_Table TABLE(
	[recid] NVARCHAR(200),
	number NVARCHAR(100),
	parentLink_category NVARCHAR(50),
	parent_number NVARCHAR(100),
	company NVARCHAR(150),
	[ownerteam] NVARCHAR(100),
	[owner] NVARCHAR(100),
	[priority] INT,
	[status] NVARCHAR(30),
	customer NVARCHAR(100),
	location NVARCHAR(100),
	[requesttype] NVARCHAR(50),
	subject NVARCHAR(500),
	[taskcatalog] NVARCHAR(100),
	[taskcategory] NVARCHAR(100),
	[tasktype] NVARCHAR(100),
	[resolutionesclink_recid] NVARCHAR(100),
	[responseesclink_recid] NVARCHAR(100),
	[startdate] DATETIME,
	[enddate] DATETIME,
	[cost] FLOAT,
	[targetdatetime] DATETIME,
	[plannedcost] FLOAT,
	[plannedeffort] FLOAT,
	[plannedstartdate] DATETIME,
	[plannedenddate] DATETIME,
	[actualcost] FLOAT,
	[actualeffort] FLOAT,
	[actualstartdate] DATETIME,
	[actualenddate] DATETIME,
	[assignedby] NVARCHAR(50),
	[assigneddatetime] DATETIME,
	[approvaldatetime] DATETIME,
	[acknowledgedby] NVARCHAR(50),
	[acknowledgeddatetime] DATETIME,
	[createdby] NVARCHAR(50),
	[createddatetime] DATETIME,
	[resolvedby] NVARCHAR(50),
	[resolveddatetime] DATETIME,
	[lastmodby] NVARCHAR(50),
	[lastmoddatetime] DATETIME
);
INSERT INTO @Temp_Table
SELECT 
	[recid],
	number,
	CASE WHEN parentLink_category IS NULL THEN NULL ELSE parentLink_category END AS parentLink_category,
	CASE WHEN parent_number IS NULL THEN NULL ELSE parent_number END AS parent_number,
	company,
	[ownerteam],
	[owner],
	[priority],
	[status],
	customer,
	location,
	[requesttype],
	subject,
	[taskcatalog],
	[taskcategory],
	[tasktype],
	[resolutionesclink_recid],
	[responseesclink_recid],
	CASE WHEN startdate IS NULL THEN NULL ELSE CONVERT(DATETIME,startdate) END AS startdate,
	CASE WHEN enddate IS NULL THEN NULL ELSE CONVERT(DATETIME,enddate) END AS enddate,
	CASE WHEN [cost] IS NULL THEN NULL ELSE CONVERT(FLOAT,[cost]) END AS cost,
	CASE WHEN targetdatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,targetdatetime) END AS targetdatetime,
	CASE WHEN [plannedcost] IS NULL THEN NULL ELSE CONVERT(FLOAT,[plannedcost]) END AS plannedcost,
	CASE WHEN [plannedeffort] IS NULL THEN NULL ELSE CONVERT(FLOAT,[plannedeffort]) END AS plannedeffort,
	CASE WHEN plannedstartdate IS NULL THEN NULL ELSE CONVERT(DATETIME,plannedstartdate) END AS plannedstartdate,
	CASE WHEN plannedenddate IS NULL THEN NULL ELSE CONVERT(DATETIME,plannedenddate) END AS plannedenddate,
	CASE WHEN [actualcost] IS NULL THEN NULL ELSE CONVERT(FLOAT,[actualcost]) END AS actualcost,
	CASE WHEN [actualeffort] IS NULL THEN NULL ELSE CONVERT(FLOAT,[actualeffort]) END AS actualeffort,
	CASE WHEN actualstartdate IS NULL THEN NULL ELSE CONVERT(DATETIME,actualstartdate) END AS actualstartdate,
	CASE WHEN actualenddate IS NULL THEN NULL ELSE CONVERT(DATETIME,actualenddate) END AS actualenddate,
	[assignedby],
	CASE WHEN assigneddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,assigneddatetime) END AS assigneddatetime,
	CASE WHEN approvaldatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,approvaldatetime) END AS approvaldatetime,
	[acknowledgedby],
	CASE WHEN acknowledgeddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,acknowledgeddatetime) END AS acknowledgeddatetime,
	[createdby],
	CASE WHEN createddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,createddatetime) END AS createddatetime,
	[resolvedby],
	CASE WHEN resolveddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,resolveddatetime) END AS resolveddatetime,
	[lastmodby],
	CASE WHEN lastmoddatetime IS NULL THEN NULL ELSE CONVERT(DATETIME,lastmoddatetime) END AS lastmoddatetime
FROM 
[dbo].[stg] stg;

/*MERGE THE TEMP TABLE WITH THE CLOSED INCIDENTS TABLE*/
MERGE [dbo].[heat_task] target
Using @Temp_Table source
ON (
TARGET.[recid] = SOURCE.[recid]
)
WHEN MATCHED
THEN UPDATE
SET
TARGET.[recid] = SOURCE.[recid],
TARGET.number = SOURCE.number,
TARGET.parentLink_category = SOURCE.parentLink_category,
TARGET.parent_number = SOURCE.parent_number,
TARGET.company = SOURCE.company,
TARGET.[ownerteam] = SOURCE.[ownerteam],
TARGET.[owner] = SOURCE.[owner],
TARGET.[priority] = SOURCE.[priority],
TARGET.[status] = SOURCE.[status],
TARGET.customer = SOURCE.customer,
TARGET.location = SOURCE.location,
TARGET.[requesttype] = SOURCE.[requesttype],
TARGET.subject = SOURCE.subject,
TARGET.[taskcatalog] = SOURCE.[taskcatalog],
TARGET.[taskcategory] = SOURCE.[taskcategory],
TARGET.[tasktype] = SOURCE.[tasktype],
TARGET.[resolutionesclink_recid] = SOURCE.[resolutionesclink_recid],
TARGET.[responseesclink_recid] = SOURCE.[responseesclink_recid],
TARGET.[startdate] = SOURCE.[startdate],
TARGET.[enddate] = SOURCE.[enddate],
TARGET.[cost] = SOURCE.[cost],
TARGET.[targetdatetime] = SOURCE.[targetdatetime],
TARGET.[plannedcost] = SOURCE.[plannedcost],
TARGET.[plannedeffort] = SOURCE.[plannedeffort],
TARGET.[plannedstartdate] = SOURCE.[plannedstartdate],
TARGET.[plannedenddate] = SOURCE.[plannedenddate],
TARGET.[actualcost] = SOURCE.[actualcost],
TARGET.[actualeffort] = SOURCE.[actualeffort],
TARGET.[actualstartdate] = SOURCE.[actualstartdate],
TARGET.[actualenddate] = SOURCE.[actualenddate],
TARGET.[assignedby] = SOURCE.[assignedby],
TARGET.[assigneddatetime] = SOURCE.[assigneddatetime],
TARGET.[approvaldatetime] = SOURCE.[approvaldatetime],
TARGET.[acknowledgedby] = SOURCE.[acknowledgedby],
TARGET.[acknowledgeddatetime] = SOURCE.[acknowledgeddatetime],
TARGET.[createdby] = SOURCE.[createdby],
TARGET.[createddatetime] = SOURCE.[createddatetime],
TARGET.[resolvedby] = SOURCE.[resolvedby],
TARGET.[resolveddatetime] = SOURCE.[resolveddatetime],
TARGET.[lastmodby] = SOURCE.[lastmodby],
TARGET.[lastmoddatetime] = SOURCE.[lastmoddatetime]
WHEN NOT MATCHED BY TARGET
THEN INSERT 
(
[recid],
number,
parentLink_category,
parent_number,
company,
[ownerteam],
[owner],
[priority],
[status],
customer,
location,
[requesttype],
subject,
[taskcatalog],
[taskcategory],
[tasktype],
[resolutionesclink_recid],
[responseesclink_recid],
[startdate],
[enddate],
[cost],
[targetdatetime],
[plannedcost],
[plannedeffort],
[plannedstartdate],
[plannedenddate],
[actualcost],
[actualeffort],
[actualstartdate],
[actualenddate],
[assignedby],
[assigneddatetime],
[approvaldatetime],
[acknowledgedby],
[acknowledgeddatetime],
[createdby],
[createddatetime],
[resolvedby],
[resolveddatetime],
[lastmodby],
[lastmoddatetime]
)
VALUES (
SOURCE.[recid],
SOURCE.number,
SOURCE.parentLink_category,
SOURCE.parent_number,
SOURCE.company,
SOURCE.[ownerteam],
SOURCE.[owner],
SOURCE.[priority],
SOURCE.[status],
SOURCE.customer,
SOURCE.location,
SOURCE.[requesttype],
SOURCE.subject,
SOURCE.[taskcatalog],
SOURCE.[taskcategory],
SOURCE.[tasktype],
SOURCE.[resolutionesclink_recid],
SOURCE.[responseesclink_recid],
SOURCE.[startdate],
SOURCE.[enddate],
SOURCE.[cost],
SOURCE.[targetdatetime],
SOURCE.[plannedcost],
SOURCE.[plannedeffort],
SOURCE.[plannedstartdate],
SOURCE.[plannedenddate],
SOURCE.[actualcost],
SOURCE.[actualeffort],
SOURCE.[actualstartdate],
SOURCE.[actualenddate],
SOURCE.[assignedby],
SOURCE.[assigneddatetime],
SOURCE.[approvaldatetime],
SOURCE.[acknowledgedby],
SOURCE.[acknowledgeddatetime],
SOURCE.[createdby],
SOURCE.[createddatetime],
SOURCE.[resolvedby],
SOURCE.[resolveddatetime],
SOURCE.[lastmodby],
SOURCE.[lastmoddatetime]
);
